<!DOCTYPE node PUBLIC
    "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
    "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd" >
<node xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <interface name="com.canonical.keeper.User">

    <method name="GetBackupChoices">
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QVariantDictMap"/>
      <arg direction="out" name="backups" type="a{sa{sv}}">
        <doc:doc>
        <doc:summary>A list of backup possibilities for the user to choose from</doc:summary>
        <doc:description>
        <doc:para>Returns a collection of backups that can be made
                  as a map from opaque backup keys to key/value pairs
                  of the choice’s properties,
                  including a ‘display-name’ string,
                  ‘type’ string (‘application’, ‘system-data’, or ‘folder’).</doc:para>
        <doc:para>The choices should be presented to the user,
                  and the keys of those selected should be passed
                  to StartBackup().</doc:para>
        </doc:description>
        </doc:doc>
      </arg>
    </method>

    <method name="StartBackup">
      <arg direction="in" name="backups" type="as">
        <doc:doc>
        <doc:summary>The backups that the user wants to make</doc:summary>
        <doc:description>
        <doc:para>An array of opaque backup keys from GetBackupChoices.</doc:para>
        </doc:description>
        </doc:doc>
      </arg>
    </method>

    <method name="GetRestoreChoices">
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QVariantDictMap"/>
      <arg direction="out" name="backups" type="a{sa{sv}}">
        <doc:doc>
        <doc:summary>The backups which already exist and can be restored</doc:summary>
        <doc:description>
        <doc:para>Returns a map of opaque backup keys to key/value pairs of
                  each backup's properties.</doc:para>
        <doc:para>The backup properties include a 'display-name' string,
                  a 'size' in uint64 bytes,
                  and a 'date' time_t as a uint64.</doc:para>
        <doc:para>The user interface should present the names/sizes/dates
                  to the user, and the keys of those selected by the user
                  should be passed to StartRestore.</doc:para>
        </doc:description>
        </doc:doc>
      </arg>
    </method>

    <method name="StartRestore">
      <arg direction="in" name="backups" type="as">
        <doc:doc>
        <doc:summary>The backups that the user wants to restore</doc:summary>
        <doc:description>
        <doc:para>An array of opaque backup keys from GetRestoreChoices</doc:para>
        </doc:description>
        </doc:doc>
      </arg>
    </method>

    <property name="State" type="a{sa{sv}}" access="read">
      <annotation name="org.qtproject.QtDBus.QtTypeName" value="QVariantDictMap"/>
      <doc:doc>
        <doc:description>
          <doc:para>Provides state information so the user interface can show
                    the progress of backup or restore tasks.</doc:para>
          <doc:para>State is a map of opaque backup keys to property maps.
                    The property maps include:
                    * 'action' (string): tells what the task is doing right now.
                       Possible values are 'queued', 'saving', 'restoring',
                       'cancelled', 'failed', and 'complete'
                    * 'display-name' (string): human-readable task name, e.g. "Pictures"
                    * 'percent-done' (double): how much of this task is complete
                    * 'speed' (int32): bytes per second
          </doc:para>
          <doc:para>A failed task's property map may also contain an 'error'
                    string if set by the backup helpers.</doc:para>
        </doc:description>
      </doc:doc>
    </property>

    <method name="Cancel">
      <doc:doc>
      <doc:summary>Cancels the current backup or restore actions.</doc:summary>
      </doc:summary>
      </doc:doc>
    </method>

  </interface>
</node>
